// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../generated/client"
  binaryTargets = ["native"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String      @id @default(cuid())
  username      String      @unique // 表示名（ユーザー名）
  userId        String      @unique @map("user_id") // ユーザーID（@付きで表示）
  email         String      @unique
  emailVerified DateTime?
  image         String?
  profileImageUrl String?   @map("profile_image_url")
  passwordHash  String?     @map("password_hash")
  isAdmin       Boolean     @default(false) @map("is_admin")
  role          UserRole    @default(user)
  adFree        Boolean     @default(false) @map("ad_free")
  bio           String?
  website       String?
  xLink         String?     @map("x_link")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  // NextAuth.js relations
  accounts      Account[]
  sessions      Session[]
  
  // App relations
  posts         Post[]
  likes         Like[]
  followers     Follow[]    @relation("UserFollowers")
  following     Follow[]    @relation("UserFollowing")
  favorites     Favorite[]

  @@index([role])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id          Int         @id @default(autoincrement())
  userId      String      @map("user_id")
  type        PostType
  title       String
  content     String?
  description String?     // for prompt posts: explanation/usage description
  platform    String?     // for conversation posts: ChatGPT | Claude | Gemini | X
  link        String?     // for conversation posts: link to original conversation
  viewCount   Int         @default(0) @map("view_count")
  likeCount   Int         @default(0) @map("like_count")
  visibility  PostVisibility @default(public)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  favorites   Favorite[]
  postTags    PostTag[]

  @@index([viewCount])
  @@index([visibility])
  @@index([visibility, createdAt])
  @@map("posts")
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime    @default(now()) @map("created_at")
  
  // Relations
  postTags  PostTag[]

  @@map("tags")
}

model Like {
  id      Int     @id @default(autoincrement())
  userId  String  @map("user_id")
  postId  Int     @map("post_id")
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Follow {
  id          Int     @id @default(autoincrement())
  followerId  String  @map("follower_id")
  followedId  String  @map("followed_id")
  
  // Relations
  follower    User    @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followed    User    @relation("UserFollowers", fields: [followedId], references: [id], onDelete: Cascade)

  @@unique([followerId, followedId])
  @@map("follows")
}

model Favorite {
  id      Int     @id @default(autoincrement())
  userId  String  @map("user_id")
  postId  Int     @map("post_id")
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("favorites")
}

model PostTag {
  postId  Int   @map("post_id")
  tagId   Int   @map("tag_id")
  
  // Relations
  post    Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

enum PostType {
  article
  prompt
  conversation
}

enum UserRole {
  user
  premium
  admin
}

enum PostVisibility {
  public
  private
  draft
  followers_only
}